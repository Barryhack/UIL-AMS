// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          String    @default("STUDENT")
  matricNumber  String?   @unique
  staffId       String?   @unique
  faculty       String?
  department    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  biometricData BiometricData?
  rfidTag       RFIDTag?

  // Relations
  courses       Course[]  @relation("LecturerCourses")
  enrollments   CourseEnrollment[]
  attendances   Attendance[]
  attendanceRecords AttendanceRecord[]
}

model Course {
  id            String    @id @default(cuid())
  code          String    @unique
  title         String
  description   String
  units         Int       @default(3)
  level         String
  semester      String
  academicYear  String
  faculty       String
  department    String
  maxCapacity   Int       @default(60)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  lecturer      User      @relation("LecturerCourses", fields: [lecturerId], references: [id])
  lecturerId    String
  enrollments   CourseEnrollment[]
  attendances   Attendance[]
  schedules     Schedule[]
  devices       CourseDevice[]
  sessions      AttendanceSession[]

  @@index([code])
  @@index([faculty, department])
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())

  @@unique([courseId, studentId])
  @@index([courseId])
  @@index([studentId])
}

model Attendance {
  id            String    @id @default(cuid())
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId      String
  student       User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId     String
  date          DateTime
  status        String    @default("ABSENT")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  justification Justification?

  @@index([courseId])
  @@index([studentId])
  @@index([date])
  @@unique([courseId, studentId, date])
}

model Schedule {
  id        String   @id @default(cuid())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  day       String   // Monday, Tuesday, etc.
  startTime String   // HH:mm format
  endTime   String   // HH:mm format
  venue     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions  AttendanceSession[]

  @@index([courseId])
  @@index([day])
}

model Device {
  id                String             @id @default(cuid())
  name              String
  serialNumber      String             @unique
  ipAddress         String?            @map("ip_address")
  macAddress        String?            @map("mac_address") @unique
  status            String            @default("ACTIVE") // "ACTIVE", "INACTIVE", "MAINTENANCE"
  mode              String            @default("ONLINE") // "ONLINE", "OFFLINE"
  type              String            @default("HYBRID") // "FINGERPRINT", "RFID", "HYBRID"
  firmwareVersion   String?
  lastSynced        DateTime?
  lastMaintenance   DateTime?
  location          Location           @relation(fields: [locationId], references: [id])
  locationId        String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  attendanceRecords AttendanceRecord[]
  assignedCourses   CourseDevice[]
  sessions          AttendanceSession[]
  deviceId          String             @unique // MAC address
  statuses          DeviceStatus[]
  commands          DeviceCommand[]
}

model CourseDevice {
  id        String   @id @default(cuid())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, deviceId])
  @@index([courseId])
  @@index([deviceId])
}

model AttendanceSession {
  id            String    @id @default(cuid())
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId      String
  schedule      Schedule? @relation(fields: [scheduleId], references: [id])
  scheduleId    String?
  startTime     DateTime
  endTime       DateTime
  status        String    @default("SCHEDULED") // "SCHEDULED", "ACTIVE", "COMPLETED", "CANCELLED"
  type          String    @default("SCHEDULED") // "SCHEDULED", "MANUAL"
  location      String?
  device        Device?   @relation(fields: [deviceId], references: [id])
  deviceId      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  records       AttendanceRecord[]

  @@index([courseId])
  @@index([scheduleId])
  @@index([status])
  @@index([deviceId])
}

model AttendanceRecord {
  id            String    @id @default(cuid())
  session       AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId     String
  device        Device    @relation(fields: [deviceId], references: [id])
  deviceId      String
  student       User      @relation(fields: [studentId], references: [id])
  studentId     String
  timestamp     DateTime  @default(now())
  type          String   // "IN" or "OUT"
  status        String   @default("PENDING") // "PENDING", "APPROVED", "REJECTED"
  verificationMethod String // "FINGERPRINT" or "RFID"
  syncedAt      DateTime?
  metadata      String?  // JSON string for additional data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([sessionId])
  @@index([deviceId])
  @@index([studentId])
  @@index([timestamp])
  @@index([status])
  @@index([verificationMethod])
}

model Location {
  id        String   @id @default(cuid())
  name      String
  devices   Device[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Justification {
  id                String     @id @default(cuid())
  attendance        Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  attendanceId      String     @unique
  reason            String
  supportingDocument String?
  status            String     @default("PENDING") // "PENDING", "APPROVED", "REJECTED"
  comment           String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@index([status])
}

model BiometricData {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @unique
  templateData  String    // Encrypted fingerprint template
  templateId    String    // Device-specific template ID
  status        String    @default("ACTIVE") // "ACTIVE", "INACTIVE"
  verifiedAt    DateTime?
  failedScans   Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([status])
}

model RFIDTag {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @unique
  tagId         String    @unique
  isActive      Boolean   @default(true)
  lastUsed      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([tagId])
}

model DeviceStatus {
  id          String   @id @default(cuid())
  deviceId    String
  device      Device   @relation(fields: [deviceId], references: [deviceId])
  status      String
  message     String?
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
}

model DeviceCommand {
  id          String    @id @default(cuid())
  deviceId    String
  device      Device    @relation(fields: [deviceId], references: [deviceId])
  type        String
  parameters  String?   // JSON string
  status      String    @default("pending") // pending, sent, completed, failed
  createdAt   DateTime  @default(now())
  sentAt      DateTime?
  completedAt DateTime?
  result      String?   // JSON string
} 