generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  password            String
  role                String               @default("STUDENT")
  matricNumber        String?              @unique
  staffId             String?              @unique
  faculty             String?
  department          String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  emailVerified       DateTime?
  image               String?
  deviceId            String?
  fingerprintId       String?
  registrationStatus  String?              @default("PENDING")
  rfidUid             String?              @unique
  departmentId        String?
  facultyId           String?
  userAttendances     Attendance[]         @relation("UserAttendance")
  attendances         Attendance[]         @relation("StudentAttendance")
  attendanceRecords   AttendanceRecord[]
  auditLogs           AuditLog[]
  biometricData       BiometricData?
  courses             Course[]             @relation("LecturerCourses")
  enrollments         CourseEnrollment[]
  deviceRegistrations DeviceRegistration[]
  deviceVerifications DeviceVerification[]
  justifications      Justification[]
  notifications       Notification[]
  rfidTag             RFIDTag?

  @@index([deviceId])
}

model Course {
  id           String              @id @default(cuid())
  code         String              @unique
  title        String
  description  String
  units        Int                 @default(3)
  creditHours  Int                 @default(3)
  capacity     Int                 @default(60)
  level        String
  semester     String
  academicYear String
  faculty      String
  department   String
  venue        String?
  maxCapacity  Int                 @default(60)
  isActive     Boolean             @default(true)
  isArchived   Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  lecturerId   String
  attendances  Attendance[]
  sessions     AttendanceSession[]
  lecturer     User                @relation("LecturerCourses", fields: [lecturerId], references: [id])
  devices      CourseDevice[]
  enrollments  CourseEnrollment[]
  schedules    Schedule[]

  @@index([code])
  @@index([faculty, department])
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  courseId  String
  studentId String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId])
  @@index([courseId])
  @@index([studentId])
}

model Attendance {
  id            String         @id @default(cuid())
  courseId      String
  studentId     String
  userId        String?
  date          DateTime
  status        String         @default("ABSENT")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User?          @relation("UserAttendance", fields: [userId], references: [id])
  student       User           @relation("StudentAttendance", fields: [studentId], references: [id], onDelete: Cascade)
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  justification Justification?

  @@unique([courseId, studentId, date])
  @@index([courseId])
  @@index([studentId])
  @@index([date])
}

model Schedule {
  id        String              @id @default(cuid())
  courseId  String
  day       String
  startTime String
  endTime   String
  venue     String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  sessions  AttendanceSession[]
  course    Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([day])
}

model Device {
  id                String              @id @default(cuid())
  name              String
  serialNumber      String              @unique
  ipAddress         String?             @map("ip_address")
  macAddress        String?             @unique @map("mac_address")
  status            String              @default("ACTIVE")
  mode              String              @default("ONLINE")
  type              String              @default("HYBRID")
  firmwareVersion   String?
  lastSynced        DateTime?
  lastSync          DateTime?
  lastSeen          DateTime?
  lastStatusMessage String?
  lastTest          DateTime?
  isOnline          Boolean             @default(false)
  lastMaintenance   DateTime?
  locationId        String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deviceId          String              @unique
  attendanceRecords AttendanceRecord[]
  sessions          AttendanceSession[]
  assignedCourses   CourseDevice[]
  location          Location            @relation(fields: [locationId], references: [id])
  commands          DeviceCommand[]
  statuses          DeviceStatus[]

  @@index([locationId])
}

model CourseDevice {
  id        String   @id @default(cuid())
  courseId  String
  deviceId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, deviceId])
  @@index([courseId])
  @@index([deviceId])
}

model AttendanceSession {
  id                  String             @id @default(cuid())
  courseId            String
  scheduleId          String?
  date                DateTime
  startTime           DateTime
  endTime             DateTime
  status              String             @default("SCHEDULED")
  type                String             @default("SCHEDULED")
  location            String?
  deviceId            String?
  requiresFingerprint Boolean            @default(false)
  requiresRFID        Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  records             AttendanceRecord[]
  device              Device?            @relation(fields: [deviceId], references: [id])
  schedule            Schedule?          @relation(fields: [scheduleId], references: [id])
  course              Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([scheduleId])
  @@index([status])
  @@index([deviceId])
}

model AttendanceRecord {
  id                 String            @id @default(cuid())
  sessionId          String
  deviceId           String
  studentId          String
  timestamp          DateTime          @default(now())
  type               String
  status             String            @default("PENDING")
  verificationMethod String
  syncedAt           DateTime?
  metadata           String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  userId             String?
  student            User              @relation(fields: [studentId], references: [id])
  device             Device            @relation(fields: [deviceId], references: [id])
  session            AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  justification      Justification?

  @@index([sessionId])
  @@index([deviceId])
  @@index([studentId])
  @@index([timestamp])
  @@index([status])
  @@index([verificationMethod])
}

model Location {
  id        String   @id @default(cuid())
  name      String
  type      String   @default("ROOM")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  devices   Device[]
}

model Justification {
  id                 String            @id @default(cuid())
  attendanceId       String            @unique
  recordId           String?           @unique
  studentId          String?
  reason             String
  supportingDocument String?
  status             String            @default("PENDING")
  comment            String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  student            User?             @relation(fields: [studentId], references: [id])
  record             AttendanceRecord? @relation(fields: [recordId], references: [id])
  attendance         Attendance        @relation(fields: [attendanceId], references: [id], onDelete: Cascade)

  @@index([status])
}

model BiometricData {
  id           String    @id @default(cuid())
  userId       String    @unique
  templateData String
  templateId   String
  status       String    @default("ACTIVE")
  verifiedAt   DateTime?
  failedScans  Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model RFIDTag {
  id        String    @id @default(cuid())
  userId    String    @unique
  tagId     String    @unique
  isActive  Boolean   @default(true)
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tagId])
}

model DeviceStatus {
  id        String   @id @default(cuid())
  deviceId  String
  status    String
  message   String?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  device    Device   @relation(fields: [deviceId], references: [deviceId])
}

model DeviceCommand {
  id          String    @id @default(cuid())
  deviceId    String
  type        String
  parameters  String?
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  sentAt      DateTime?
  completedAt DateTime?
  result      String?
  device      Device    @relation(fields: [deviceId], references: [deviceId])
}

model DeviceRegistration {
  id        String   @id @default(cuid())
  deviceId  String   @unique
  userId    String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([deviceId])
  @@index([userId])
}

model DeviceVerification {
  id        String   @id @default(cuid())
  deviceId  String
  userId    String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([deviceId])
  @@index([userId])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entity     String
  resourceId String?
  details    String?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([createdAt])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String    @default("INFO")
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  readAt    DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}
